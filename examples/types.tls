(print a = _print a)
;;(printNat (Nat a) = print a)
;;(a = (printNat foo))


(:type Bool
  (true = Bool True)
  (false = Bool False)
)

;;(Bool Invalid) --- error

(if (:literal Bool.true) a b = a)
(if (:literal Bool.false) a b = b)

(takesFoo (Foo a) = a)

(takesFooImplicitly b = takesFoo b)

(wrongCall = takesFooImplicitly (Bar a))

(wrongCall)

;;(returnBool b = b)


;;(rightCall a = (if (returnBool a) foo bar))

;;this will result in a type error
;;(wrongCall = (if NotBool foo bar))

;;(callWithBool a = (if a foo bar))
;;this will result in a type error
;;(a = (callWithBool NotBool))

;;this too
;;(invalid = (Bool Invalid))


;;(invalid)

